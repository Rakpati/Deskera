Question 1 :
	Suppose you are given an array containing N Positive integers, your task is to print largest of all elements of the array.

Solution : 

import java.util.InputMismatchException;
import java.util.Scanner;

public class LargestArrVal {

	public static int maxArrVal(int arr[], int count) {
		int max = 0;
		max = arr[0];

		/*loop to find the maximum value from the array*/
		for(int i = 0; i < count; i++)
		{
			if(max < arr[i])
			{
				max = arr[i];
			}
		}
		return max;
	}

	public static void main(String[] args) 
	{
		int count, var;
		try {
			Scanner scannerInput = new Scanner(System.in);	
			System.out.print("Enter count of numbers you want in array:");
			count = scannerInput.nextInt();	//store the count of number of array we want as an input

			/*Check of count is greater than 0*/
			if(count<1 || count>100)
				throw new InputMismatchException();

			int arr[] = new int[count];
			System.out.println("Enter all the numbers:");

			/*Loop to store numbers in array*/
			for(int i = 0; i < count; i++){
				var = scannerInput.nextInt();

				/*Loop to check if the number is less than 1 and greater than 100*/
				if(var<1 || var>100) {
					throw new InputMismatchException();
				}

				arr[i] = var;	//storing all the array input in the array 
			}
			System.out.println("Largest Number is :"+maxArrVal(arr,count));
		}
		catch (InputMismatchException e) {
			System.out.println("You have entered invalid data");
		}
	}
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 2 :
	Suppose you are given an array containing N positive integers all between 1 and N including 1 and N, your task is to print all elements of the array which occur more than once in the array.

Solution : 

import java.util.HashSet;
import java.util.InputMismatchException;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;

public class DuplicateValArr {

	private static String duplicateArrVal(int[] arr, int count) {
		Set<Integer> arraySet = new HashSet<>();
		Set<String> duplicateSet = new HashSet<>();
		String output = "No Duplicates";
		for (Integer array : arr) {
			if(array<=count) {
				if (arraySet.add(array) == false) { 
					duplicateSet.add(array.toString());
				}
			}
			else {
				output = "Invalid input – elements must be between 1 and "+count;
				break;
			}
		}
		if(!duplicateSet.isEmpty()) {
			output = "Duplicates are: "+duplicateSet.stream().collect(Collectors.joining(","));
		}
		return output;
	}

	public static void main(String[] args) 
	{
		int count, var;
		try {
			Scanner scannerInput = new Scanner(System.in);	
			System.out.print("Enter count of numbers you want in array:");
			count = scannerInput.nextInt();	//store the count of number of array we want as an input

			/*Check of count is greater than 0 and less 1001*/
			if(count<1 || count>1000)
				throw new InputMismatchException();

			int arr[] = new int[count];
			System.out.println("Enter all the numbers:");

			/*Loop to store numbers in array*/
			for(int i = 0; i < count; i++){
				var = scannerInput.nextInt();

				/*Loop to check if the number is less than 1 and greater than 1001*/
				if(var<1 || var>1000) {
					throw new InputMismatchException();
				}
				arr[i] = var;	//storing all the array input in the array 
			}
			System.out.println(duplicateArrVal(arr,count));
		}
		catch (InputMismatchException e) {
			System.out.println("You have entered invalid data");
		}
	}
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 3 : 
	Given two sorted lists of integers, write a program to merge the list efficiently so that the new merged list is also sorted.

Solution : 

public class MergeTwoList {
    private LinkedListT a;
    private LinkedListT b;

    public MergeTwoList(LinkedListT a, LinkedListT b) {
        this.a = a;
        this.b = b;
    }
    /* Method to sort the elements of 2 different list*/
    public LinkedListT mergeListMethod() {
        LinkedListT result = new LinkedListT();
        while (a.head != null && b.head != null) {
            if (a.head.data < b.head.data) {
                result.addAtEnd(a.head.data);
                a.head = a.head.next;
            } else {
                result.addAtEnd(b.head.data);
                b.head = b.head.next;
            }
        }
        while (a.head != null) {
            result.addAtEnd(a.head.data);
            a.head = a.head.next;
        }
        while (b.head != null) {
            result.addAtEnd(b.head.data);
            b.head = b.head.next;
        }
        return result;
    }
    /*Method to display the value inside the node*/
    public void display(Node head) {
        System.out.println("");
        Node currNode = head;
        while (currNode != null) {
            System.out.print("->" + currNode.data);
            currNode = currNode.next;
        }
        System.out.println("");
    }

    public static void main(String[] args) {
        System.out.println("Sorted List : ");
        LinkedListT a1 = new LinkedListT();
        a1.addAtBegin(18);
        a1.addAtBegin(6);
        a1.addAtBegin(2);
        LinkedListT b1 = new LinkedListT();
        b1.addAtBegin(19);
        b1.addAtBegin(17);
        b1.addAtBegin(3);
        b1.addAtBegin(1);
        MergeTwoList m1 = new MergeTwoList(a1, b1);
        m1.display(a1.head);
        m1.display(b1.head);

        LinkedListT res = m1.mergeListMethod();
        m1.display(res.head);
    }
}

class Node {
    public int data;
    public Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedListT {
    public Node head;
    public int size;
    public LinkedListT() {
        head = null;
    }
    /*To make a note of head element of list with the size*/
    public void addAtBegin(int data) {
        Node n = new Node(data);
        n.next = head;
        head = n;
        size++;
    }
    public void addAtEnd(int data) {
        if (head == null) {
            addAtBegin(data);
        } else {
            Node n = new Node(data);
            Node currNode = head;
            while (currNode.next != null) {
                currNode = currNode.next;
            }
            currNode.next = n;
            size++;
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 4 :
	There is an array of length n containing N distinct integers between 1 and N+1 inclusive. Hence there
is one number between 1 and N+1 inclusive, Which is not in the array. Write an efficient program
to find missing number from the array.

Solution : 

public class MissingNumArr {
	// Function to find missing number from the array 
	static int getMissingNum(int arr[]){ 
		int counter = arr.length; 
		for (int i=0; i<counter; i++)         
			if (arr[i] != (i+1)) 
				return (i+1); 

		// If all numbers from 1 to counter are present then return i+1 
		return counter+1; // return counter + 1 i.e missing number from the array
	} 
	public static void main(String args[]){ 
		int arr[] = {1,2,3,4,5,6,7,8,10,11}; 
		System.out.println(getMissingNum(arr)); 
	} 
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 5 :
	Write an efficient program to reverse the order of words in a string. Example
Input: “my name is earl”
Output: “earl is name my”

Solution :

import java.util.Scanner;
import java.util.regex.Pattern; 

public class ReverseString {
	
    /* Method to reverse the order of the String*/ 
    static String reverseWords(String inputStr){ 
    	
        /* Searching space between the string*/ 
        Pattern searchPattern = Pattern.compile("\\s"); 
  
        /*splitting the string with whitespace and store in inputArr array.*/ 
        String[] inputArr = searchPattern.split(inputStr); 
        String result = ""; 
  
        /*Loop to iterate over the array and store reverse order of the string.*/ 
        for (int i = 0; i < inputArr.length; i++) { 
            if (i == inputArr.length - 1) 
                result = inputArr[i] + result; 
            else
                result = " " + inputArr[i] + result; 
        } 
        return result; 
    }
    public static void main(String[] args){ 
    	String inputStr= "";
		Scanner scannerInput = new Scanner(System.in);	
		System.out.println("Enter the text of which you want to reverse the order:");
		inputStr = scannerInput.nextLine();	//store the string we want as an input
        System.out.println(reverseWords(inputStr)); 
    } 
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question 6 :

	Question 6.1 :
		SELECT EMP.FIRST_NAME AS FIRST_NAME, SUM(IFNULL(INC.INC_AMT, 0)) AS INCENTIVE_AMT FROM EMPLOYEE EMP LEFT JOIN INCENTIVES INC ON EMP.EMPLOYEE_ID=INC.EMPLOYEE_REF_ID GROUP BY EMP.EMPLOYEE_ID;

	Question 6.2 :
		SELECT COUNT(FIRST_NAME) AS NO_OF_EMPLOYEES,DEPARTMENT, SUM(SALARY) AS TOTAL_SALARY FROM [EMPLOYEE] GROUP BY DEPARTMENT ORDER BY TOTAL_SALARY DESC;

	Question 6.3 :
		SELECT FIRST_NAME, LAST_NAME, MAX(SALARY) AS SALARY, JOINING_DATE, DEPARTMENT
FROM EMPLOYEE
WHERE SALARY < ( SELECT MAX(SALARY) FROM EMPLOYEE);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------